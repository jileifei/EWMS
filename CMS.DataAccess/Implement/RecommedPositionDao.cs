//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>RecommedPositionDao</c> is the implementation of <see cref="IRecommedPositionDao"/>.</summary>
    public partial class RecommedPositionDao : BaseDAO, IRecommedPositionDao {

		/// <summary>Implements <see cref="IRecommedPositionDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "RecommedPosition.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IRecommedPositionDao.Find"/></summary>
		public RecommedPosition Find(Int64 iD) {
			String stmtId = "RecommedPosition.Find";
			RecommedPosition result = SqlMapperManager.Instance.QueryForObject<RecommedPosition>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IRecommedPositionDao.FindAll"/></summary>
		public IList<RecommedPosition> FindAll() {
			String stmtId = "RecommedPosition.FindAll";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.QuickFindAll"/></summary>
		public IList<RecommedPosition> QuickFindAll() {
			String stmtId = "RecommedPosition.QuickFindAll";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.FindByName"/></summary>
		public IList<RecommedPosition> FindByName(String name) {
			String stmtId = "RecommedPosition.FindByName";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, name);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.FindByChannelID"/></summary>
		public IList<RecommedPosition> FindByChannelID(Int64 channelID) {
			String stmtId = "RecommedPosition.FindByChannelID";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, channelID);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.FindByLocationType"/></summary>
		public IList<RecommedPosition> FindByLocationType(Int32 locationType) {
			String stmtId = "RecommedPosition.FindByLocationType";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, locationType);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.FindBySummary"/></summary>
		public IList<RecommedPosition> FindBySummary(String summary) {
			String stmtId = "RecommedPosition.FindBySummary";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, summary);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.FindByCreateTime"/></summary>
		public IList<RecommedPosition> FindByCreateTime(DateTime createTime) {
			String stmtId = "RecommedPosition.FindByCreateTime";
			IList<RecommedPosition> result = SqlMapperManager.Instance.QueryForList<RecommedPosition>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.Insert"/></summary>
		public void Insert(RecommedPosition obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RecommedPosition.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.Update"/></summary>
		public void Update(RecommedPosition obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RecommedPosition.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.Delete"/></summary>
		public void Delete(RecommedPosition obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RecommedPosition.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.DeleteByName"/></summary>
		public int DeleteByName(String name) {
			String stmtId = "RecommedPosition.DeleteByName";
			int result = SqlMapperManager.Instance.Delete(stmtId, name);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.DeleteByChannelID"/></summary>
		public int DeleteByChannelID(Int64 channelID) {
			String stmtId = "RecommedPosition.DeleteByChannelID";
			int result = SqlMapperManager.Instance.Delete(stmtId, channelID);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.DeleteByLocationType"/></summary>
		public int DeleteByLocationType(Int32 locationType) {
			String stmtId = "RecommedPosition.DeleteByLocationType";
			int result = SqlMapperManager.Instance.Delete(stmtId, locationType);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.DeleteBySummary"/></summary>
		public int DeleteBySummary(String summary) {
			String stmtId = "RecommedPosition.DeleteBySummary";
			int result = SqlMapperManager.Instance.Delete(stmtId, summary);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "RecommedPosition.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IRecommedPositionDao.Reload"/></summary>
		public void Reload(RecommedPosition obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RecommedPosition.Find";
			SqlMapperManager.Instance.QueryForObject<RecommedPosition>(stmtId, obj, obj);
		}
		
	}

}
