//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>RoleInfoDao</c> is the implementation of <see cref="IRoleInfoDao"/>.</summary>
    public partial class RoleInfoDao : BaseDAO, IRoleInfoDao {

		/// <summary>Implements <see cref="IRoleInfoDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "RoleInfo.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IRoleInfoDao.Find"/></summary>
		public RoleInfo Find(Int64 iD) {
			String stmtId = "RoleInfo.Find";
			RoleInfo result = SqlMapperManager.Instance.QueryForObject<RoleInfo>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IRoleInfoDao.FindAll"/></summary>
		public IList<RoleInfo> FindAll() {
			String stmtId = "RoleInfo.FindAll";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.QuickFindAll"/></summary>
		public IList<RoleInfo> QuickFindAll() {
			String stmtId = "RoleInfo.QuickFindAll";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.FindByRoleName"/></summary>
		public IList<RoleInfo> FindByRoleName(String roleName) {
			String stmtId = "RoleInfo.FindByRoleName";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, roleName);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.FindByDescription"/></summary>
		public IList<RoleInfo> FindByDescription(String description) {
			String stmtId = "RoleInfo.FindByDescription";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, description);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.FindByCreateTime"/></summary>
		public IList<RoleInfo> FindByCreateTime(DateTime createTime) {
			String stmtId = "RoleInfo.FindByCreateTime";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.FindByIsCmsAdmin"/></summary>
		public IList<RoleInfo> FindByIsCmsAdmin(Int32 isCmsAdmin) {
			String stmtId = "RoleInfo.FindByIsCmsAdmin";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, isCmsAdmin);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.FindByCreateUserID"/></summary>
		public IList<RoleInfo> FindByCreateUserID(Int64 createUserID) {
			String stmtId = "RoleInfo.FindByCreateUserID";
			IList<RoleInfo> result = SqlMapperManager.Instance.QueryForList<RoleInfo>(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.Insert"/></summary>
		public void Insert(RoleInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RoleInfo.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.Update"/></summary>
		public void Update(RoleInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RoleInfo.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.Delete"/></summary>
		public void Delete(RoleInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RoleInfo.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.DeleteByRoleName"/></summary>
		public int DeleteByRoleName(String roleName) {
			String stmtId = "RoleInfo.DeleteByRoleName";
			int result = SqlMapperManager.Instance.Delete(stmtId, roleName);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.DeleteByDescription"/></summary>
		public int DeleteByDescription(String description) {
			String stmtId = "RoleInfo.DeleteByDescription";
			int result = SqlMapperManager.Instance.Delete(stmtId, description);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "RoleInfo.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.DeleteByIsCmsAdmin"/></summary>
		public int DeleteByIsCmsAdmin(Int32 isCmsAdmin) {
			String stmtId = "RoleInfo.DeleteByIsCmsAdmin";
			int result = SqlMapperManager.Instance.Delete(stmtId, isCmsAdmin);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.DeleteByCreateUserID"/></summary>
		public int DeleteByCreateUserID(Int64 createUserID) {
			String stmtId = "RoleInfo.DeleteByCreateUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IRoleInfoDao.Reload"/></summary>
		public void Reload(RoleInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "RoleInfo.Find";
			SqlMapperManager.Instance.QueryForObject<RoleInfo>(stmtId, obj, obj);
		}
		
	}

}
