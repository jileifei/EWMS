//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;
using System.Collections;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>FileStoreDao</c> is the implementation of <see cref="IFileStoreDao"/>.</summary>
    public partial class FileStoreDao : BaseDAO, IFileStoreDao {

		/// <summary>Implements <see cref="IFileStoreDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "FileStore.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IFileStoreDao.Find"/></summary>
		public FileStore Find(Int64 iD) {
			String stmtId = "FileStore.Find";
			FileStore result = SqlMapperManager.Instance.QueryForObject<FileStore>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IFileStoreDao.FindAll"/></summary>
		public IList<FileStore> FindAll() {
			String stmtId = "FileStore.FindAll";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.QuickFindAll"/></summary>
		public IList<FileStore> QuickFindAll() {
			String stmtId = "FileStore.QuickFindAll";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByChannelID"/></summary>
		public IList<FileStore> FindByChannelID(Int64? channelID) {
			String stmtId = "FileStore.FindByChannelID";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, channelID);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByDocID"/></summary>
		public IList<FileStore> FindByDocID(Int64? docID) {
			String stmtId = "FileStore.FindByDocID";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, docID);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByExtName"/></summary>
		public IList<FileStore> FindByExtName(String extName) {
			String stmtId = "FileStore.FindByExtName";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, extName);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByLocalPath"/></summary>
		public IList<FileStore> FindByLocalPath(String localPath) {
			String stmtId = "FileStore.FindByLocalPath";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, localPath);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByURL"/></summary>
		public IList<FileStore> FindByURL(String uRL) {
			String stmtId = "FileStore.FindByURL";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, uRL);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByFileSize"/></summary>
		public IList<FileStore> FindByFileSize(Int32 fileSize) {
			String stmtId = "FileStore.FindByFileSize";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, fileSize);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByMd5"/></summary>
		public IList<FileStore> FindByMd5(String md5) {
			String stmtId = "FileStore.FindByMd5";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, md5);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByCreateTime"/></summary>
		public IList<FileStore> FindByCreateTime(DateTime createTime) {
			String stmtId = "FileStore.FindByCreateTime";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.FindByCreateUserID"/></summary>
		public IList<FileStore> FindByCreateUserID(Int64 createUserID) {
			String stmtId = "FileStore.FindByCreateUserID";
			IList<FileStore> result = SqlMapperManager.Instance.QueryForList<FileStore>(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.Insert"/></summary>
		public void Insert(FileStore obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "FileStore.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.Update"/></summary>
		public void Update(FileStore obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "FileStore.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}

        public void UpdateLocalPath(string newPath, string oldPath, string imgurl)
        {
            Hashtable hs = new Hashtable();
            hs.Add("newpath", newPath);
            hs.Add("oldpath", oldPath);
            hs.Add("url",imgurl);
            String stmtId = "FileStore.UpdateLocalPath";
            SqlMapperManager.Instance.Update(stmtId, hs);
        }

        public void Update(string publictime,string localpath)
        {
            Hashtable hs = new Hashtable();
            hs.Add("PublicTime", publictime);
            hs.Add("LocalPath", localpath);
            String stmtId = "FileStore.UpdatePublicTime";
            SqlMapperManager.Instance.Update(stmtId, hs);
        }
		
		/// <summary>Implements <see cref="IFileStoreDao.Delete"/></summary>
		public void Delete(FileStore obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "FileStore.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByChannelID"/></summary>
		public int DeleteByChannelID(Int64? channelID) {
			String stmtId = "FileStore.DeleteByChannelID";
			int result = SqlMapperManager.Instance.Delete(stmtId, channelID);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByDocID"/></summary>
		public int DeleteByDocID(Int64? docID) {
			String stmtId = "FileStore.DeleteByDocID";
			int result = SqlMapperManager.Instance.Delete(stmtId, docID);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByExtName"/></summary>
		public int DeleteByExtName(String extName) {
			String stmtId = "FileStore.DeleteByExtName";
			int result = SqlMapperManager.Instance.Delete(stmtId, extName);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByLocalPath"/></summary>
		public int DeleteByLocalPath(String localPath) {
			String stmtId = "FileStore.DeleteByLocalPath";
			int result = SqlMapperManager.Instance.Delete(stmtId, localPath);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByURL"/></summary>
		public int DeleteByURL(String uRL) {
			String stmtId = "FileStore.DeleteByURL";
			int result = SqlMapperManager.Instance.Delete(stmtId, uRL);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByFileSize"/></summary>
		public int DeleteByFileSize(Int32 fileSize) {
			String stmtId = "FileStore.DeleteByFileSize";
			int result = SqlMapperManager.Instance.Delete(stmtId, fileSize);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByMd5"/></summary>
		public int DeleteByMd5(String md5) {
			String stmtId = "FileStore.DeleteByMd5";
			int result = SqlMapperManager.Instance.Delete(stmtId, md5);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "FileStore.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.DeleteByCreateUserID"/></summary>
		public int DeleteByCreateUserID(Int64 createUserID) {
			String stmtId = "FileStore.DeleteByCreateUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IFileStoreDao.Reload"/></summary>
		public void Reload(FileStore obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "FileStore.Find";
			SqlMapperManager.Instance.QueryForObject<FileStore>(stmtId, obj, obj);
		}
		
	}

}
