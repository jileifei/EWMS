//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>DataBlockDao</c> is the implementation of <see cref="IDataBlockDao"/>.</summary>
    public partial class DataBlockDao : IDataBlockDao {

		/// <summary>Implements <see cref="IDataBlockDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "DataBlock.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IDataBlockDao.Find"/></summary>
		public DataBlock Find(Int64 iD) {
			String stmtId = "DataBlock.Find";
			DataBlock result = SqlMapperManager.Instance.QueryForObject<DataBlock>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IDataBlockDao.FindAll"/></summary>
		public IList<DataBlock> FindAll() {
			String stmtId = "DataBlock.FindAll";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.QuickFindAll"/></summary>
		public IList<DataBlock> QuickFindAll() {
			String stmtId = "DataBlock.QuickFindAll";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByBlockName"/></summary>
		public IList<DataBlock> FindByBlockName(String blockName) {
			String stmtId = "DataBlock.FindByBlockName";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, blockName);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByEnName"/></summary>
		public IList<DataBlock> FindByEnName(String enName) {
			String stmtId = "DataBlock.FindByEnName";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, enName);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByType"/></summary>
		public IList<DataBlock> FindByType(Int16 type) {
			String stmtId = "DataBlock.FindByType";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, type);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByRowCount"/></summary>
		public IList<DataBlock> FindByRowCount(Int32 rowCount) {
			String stmtId = "DataBlock.FindByRowCount";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, rowCount);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByOrderByField"/></summary>
		public IList<DataBlock> FindByOrderByField(String orderByField) {
			String stmtId = "DataBlock.FindByOrderByField";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, orderByField);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByWhere"/></summary>
		public IList<DataBlock> FindByWhere(String where) {
			String stmtId = "DataBlock.FindByWhere";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, where);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByStatus"/></summary>
		public IList<DataBlock> FindByStatus(Int16 status) {
			String stmtId = "DataBlock.FindByStatus";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, status);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByTemplateID"/></summary>
		public IList<DataBlock> FindByTemplateID(Int64 templateID) {
			String stmtId = "DataBlock.FindByTemplateID";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByNote"/></summary>
		public IList<DataBlock> FindByNote(String note) {
			String stmtId = "DataBlock.FindByNote";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, note);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.FindByAddDate"/></summary>
		public IList<DataBlock> FindByAddDate(DateTime addDate) {
			String stmtId = "DataBlock.FindByAddDate";
			IList<DataBlock> result = SqlMapperManager.Instance.QueryForList<DataBlock>(stmtId, addDate);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.Insert"/></summary>
        public Int64 Insert(DataBlock obj)
        {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "DataBlock.Insert";
            Int64 blockId = (Int64)SqlMapperManager.Instance.Insert(stmtId, obj);
		    return blockId;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.Update"/></summary>
		public void Update(DataBlock obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "DataBlock.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.Delete"/></summary>
		public void Delete(DataBlock obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "DataBlock.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByBlockName"/></summary>
		public int DeleteByBlockName(String blockName) {
			String stmtId = "DataBlock.DeleteByBlockName";
			int result = SqlMapperManager.Instance.Delete(stmtId, blockName);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByEnName"/></summary>
		public int DeleteByEnName(String enName) {
			String stmtId = "DataBlock.DeleteByEnName";
			int result = SqlMapperManager.Instance.Delete(stmtId, enName);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByType"/></summary>
		public int DeleteByType(Int16 type) {
			String stmtId = "DataBlock.DeleteByType";
			int result = SqlMapperManager.Instance.Delete(stmtId, type);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByRowCount"/></summary>
		public int DeleteByRowCount(Int32 rowCount) {
			String stmtId = "DataBlock.DeleteByRowCount";
			int result = SqlMapperManager.Instance.Delete(stmtId, rowCount);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByOrderByField"/></summary>
		public int DeleteByOrderByField(String orderByField) {
			String stmtId = "DataBlock.DeleteByOrderByField";
			int result = SqlMapperManager.Instance.Delete(stmtId, orderByField);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByWhere"/></summary>
		public int DeleteByWhere(String where) {
			String stmtId = "DataBlock.DeleteByWhere";
			int result = SqlMapperManager.Instance.Delete(stmtId, where);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByStatus"/></summary>
		public int DeleteByStatus(Int16 status) {
			String stmtId = "DataBlock.DeleteByStatus";
			int result = SqlMapperManager.Instance.Delete(stmtId, status);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByTemplateID"/></summary>
		public int DeleteByTemplateID(Int64 templateID) {
			String stmtId = "DataBlock.DeleteByTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByNote"/></summary>
		public int DeleteByNote(String note) {
			String stmtId = "DataBlock.DeleteByNote";
			int result = SqlMapperManager.Instance.Delete(stmtId, note);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.DeleteByAddDate"/></summary>
		public int DeleteByAddDate(DateTime addDate) {
			String stmtId = "DataBlock.DeleteByAddDate";
			int result = SqlMapperManager.Instance.Delete(stmtId, addDate);
			return result;
		}
		
		/// <summary>Implements <see cref="IDataBlockDao.Reload"/></summary>
		public void Reload(DataBlock obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "DataBlock.Find";
			SqlMapperManager.Instance.QueryForObject<DataBlock>(stmtId, obj, obj);
		}
		
	}

}
