//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>ChannelInfoDao</c> is the implementation of <see cref="IChannelInfoDao"/>.</summary>
    public partial class ChannelInfoDao : IChannelInfoDao {

		/// <summary>Implements <see cref="IChannelInfoDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "ChannelInfo.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

        /// <summary>Implements <see cref="IChannelInfoDao.GetOrderID"/></summary>
        public int GetOrderID(long channelID)
        {
            String stmtId = "ChannelInfo.GetOrderID";
            int result = 0;
            object v = SqlMapperManager.Instance.QueryForObject<object>(stmtId, channelID);
            if (v != null)
            {
                Int32.TryParse(v.ToString(), out result);
            }
            return result;
        }

		/// <summary>Implements <see cref="IChannelInfoDao.Find"/></summary>
		public ChannelInfo Find(Int64 iD) {
			String stmtId = "ChannelInfo.Find";
			ChannelInfo result = SqlMapperManager.Instance.QueryForObject<ChannelInfo>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IChannelInfoDao.FindAll"/></summary>
		public IList<ChannelInfo> FindAll() {
			String stmtId = "ChannelInfo.FindAll";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.QuickFindAll"/></summary>
		public IList<ChannelInfo> QuickFindAll() {
			String stmtId = "ChannelInfo.QuickFindAll";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByParentChannelID"/></summary>
		public IList<ChannelInfo> FindByParentChannelID(Int64? parentChannelID) {
			String stmtId = "ChannelInfo.FindByParentChannelID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, parentChannelID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByName"/></summary>
		public IList<ChannelInfo> FindByName(String name) {
			String stmtId = "ChannelInfo.FindByName";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, name);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByEnName"/></summary>
		public IList<ChannelInfo> FindByEnName(String enName) {
			String stmtId = "ChannelInfo.FindByEnName";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, enName);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByType"/></summary>
		public IList<ChannelInfo> FindByType(Int32 type) {
			String stmtId = "ChannelInfo.FindByType";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, type);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindBySort"/></summary>
		public IList<ChannelInfo> FindBySort(Int32 sort) {
			String stmtId = "ChannelInfo.FindBySort";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, sort);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByChannelUrlPart"/></summary>
		public IList<ChannelInfo> FindByChannelUrlPart(String channelUrlPart) {
			String stmtId = "ChannelInfo.FindByChannelUrlPart";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, channelUrlPart);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByKeyword"/></summary>
		public IList<ChannelInfo> FindByKeyword(String keyword) {
			String stmtId = "ChannelInfo.FindByKeyword";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, keyword);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByDescription"/></summary>
		public IList<ChannelInfo> FindByDescription(String description) {
			String stmtId = "ChannelInfo.FindByDescription";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, description);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByTemplateID"/></summary>
		public IList<ChannelInfo> FindByTemplateID(Int64 templateID) {
			String stmtId = "ChannelInfo.FindByTemplateID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByListTemplateID"/></summary>
		public IList<ChannelInfo> FindByListTemplateID(Int64? listTemplateID) {
			String stmtId = "ChannelInfo.FindByListTemplateID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, listTemplateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByPagerID"/></summary>
		public IList<ChannelInfo> FindByPagerID(Int32? pagerID) {
			String stmtId = "ChannelInfo.FindByPagerID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, pagerID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByContentTemplateID"/></summary>
		public IList<ChannelInfo> FindByContentTemplateID(Int64? contentTemplateID) {
			String stmtId = "ChannelInfo.FindByContentTemplateID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, contentTemplateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByCreateTime"/></summary>
		public IList<ChannelInfo> FindByCreateTime(DateTime createTime) {
			String stmtId = "ChannelInfo.FindByCreateTime";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByCreateUserID"/></summary>
		public IList<ChannelInfo> FindByCreateUserID(Int64 createUserID) {
			String stmtId = "ChannelInfo.FindByCreateUserID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByModifyTime"/></summary>
		public IList<ChannelInfo> FindByModifyTime(DateTime modifyTime) {
			String stmtId = "ChannelInfo.FindByModifyTime";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, modifyTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByModifyUserID"/></summary>
		public IList<ChannelInfo> FindByModifyUserID(Int64 modifyUserID) {
			String stmtId = "ChannelInfo.FindByModifyUserID";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, modifyUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.FindByStatus"/></summary>
		public IList<ChannelInfo> FindByStatus(Int32 status) {
			String stmtId = "ChannelInfo.FindByStatus";
			IList<ChannelInfo> result = SqlMapperManager.Instance.QueryForList<ChannelInfo>(stmtId, status);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.Insert"/></summary>
		public void Insert(ChannelInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "ChannelInfo.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.Update"/></summary>
		public void Update(ChannelInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "ChannelInfo.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.Delete"/></summary>
		public void Delete(ChannelInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "ChannelInfo.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByParentChannelID"/></summary>
		public int DeleteByParentChannelID(Int64? parentChannelID) {
			String stmtId = "ChannelInfo.DeleteByParentChannelID";
			int result = SqlMapperManager.Instance.Delete(stmtId, parentChannelID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByName"/></summary>
		public int DeleteByName(String name) {
			String stmtId = "ChannelInfo.DeleteByName";
			int result = SqlMapperManager.Instance.Delete(stmtId, name);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByEnName"/></summary>
		public int DeleteByEnName(String enName) {
			String stmtId = "ChannelInfo.DeleteByEnName";
			int result = SqlMapperManager.Instance.Delete(stmtId, enName);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByType"/></summary>
		public int DeleteByType(Int32 type) {
			String stmtId = "ChannelInfo.DeleteByType";
			int result = SqlMapperManager.Instance.Delete(stmtId, type);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteBySort"/></summary>
		public int DeleteBySort(Int32 sort) {
			String stmtId = "ChannelInfo.DeleteBySort";
			int result = SqlMapperManager.Instance.Delete(stmtId, sort);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByChannelUrlPart"/></summary>
		public int DeleteByChannelUrlPart(String channelUrlPart) {
			String stmtId = "ChannelInfo.DeleteByChannelUrlPart";
			int result = SqlMapperManager.Instance.Delete(stmtId, channelUrlPart);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByKeyword"/></summary>
		public int DeleteByKeyword(String keyword) {
			String stmtId = "ChannelInfo.DeleteByKeyword";
			int result = SqlMapperManager.Instance.Delete(stmtId, keyword);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByDescription"/></summary>
		public int DeleteByDescription(String description) {
			String stmtId = "ChannelInfo.DeleteByDescription";
			int result = SqlMapperManager.Instance.Delete(stmtId, description);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByTemplateID"/></summary>
		public int DeleteByTemplateID(Int64 templateID) {
			String stmtId = "ChannelInfo.DeleteByTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByListTemplateID"/></summary>
		public int DeleteByListTemplateID(Int64? listTemplateID) {
			String stmtId = "ChannelInfo.DeleteByListTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, listTemplateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByPagerID"/></summary>
		public int DeleteByPagerID(Int32? pagerID) {
			String stmtId = "ChannelInfo.DeleteByPagerID";
			int result = SqlMapperManager.Instance.Delete(stmtId, pagerID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByContentTemplateID"/></summary>
		public int DeleteByContentTemplateID(Int64? contentTemplateID) {
			String stmtId = "ChannelInfo.DeleteByContentTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, contentTemplateID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "ChannelInfo.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByCreateUserID"/></summary>
		public int DeleteByCreateUserID(Int64 createUserID) {
			String stmtId = "ChannelInfo.DeleteByCreateUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByModifyTime"/></summary>
		public int DeleteByModifyTime(DateTime modifyTime) {
			String stmtId = "ChannelInfo.DeleteByModifyTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, modifyTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByModifyUserID"/></summary>
		public int DeleteByModifyUserID(Int64 modifyUserID) {
			String stmtId = "ChannelInfo.DeleteByModifyUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, modifyUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.DeleteByStatus"/></summary>
		public int DeleteByStatus(Int32 status) {
			String stmtId = "ChannelInfo.DeleteByStatus";
			int result = SqlMapperManager.Instance.Delete(stmtId, status);
			return result;
		}
		
		/// <summary>Implements <see cref="IChannelInfoDao.Reload"/></summary>
		public void Reload(ChannelInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "ChannelInfo.Find";
			SqlMapperManager.Instance.QueryForObject<ChannelInfo>(stmtId, obj, obj);
		}
		
	}

}
