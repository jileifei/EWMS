//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>UserInfoDao</c> is the implementation of <see cref="IUserInfoDao"/>.</summary>
    public partial class UserInfoDao : BaseDAO, IUserInfoDao {

		/// <summary>Implements <see cref="IUserInfoDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "UserInfo.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IUserInfoDao.Find"/></summary>
		public UserInfo Find(Int64 iD) {
			String stmtId = "UserInfo.Find";
			UserInfo result = SqlMapperManager.Instance.QueryForObject<UserInfo>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IUserInfoDao.FindAll"/></summary>
		public IList<UserInfo> FindAll() {
			String stmtId = "UserInfo.FindAll";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.QuickFindAll"/></summary>
		public IList<UserInfo> QuickFindAll() {
			String stmtId = "UserInfo.QuickFindAll";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByUserName"/></summary>
		public IList<UserInfo> FindByUserName(String userName) {
			String stmtId = "UserInfo.FindByUserName";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, userName);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByPassword"/></summary>
		public IList<UserInfo> FindByPassword(String password) {
			String stmtId = "UserInfo.FindByPassword";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, password);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByRealName"/></summary>
		public IList<UserInfo> FindByRealName(String realName) {
			String stmtId = "UserInfo.FindByRealName";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, realName);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByRoleID"/></summary>
		public IList<UserInfo> FindByRoleID(Int64 roleID) {
			String stmtId = "UserInfo.FindByRoleID";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, roleID);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByDepartment"/></summary>
		public IList<UserInfo> FindByDepartment(String department) {
			String stmtId = "UserInfo.FindByDepartment";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, department);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByCreateTime"/></summary>
		public IList<UserInfo> FindByCreateTime(DateTime createTime) {
			String stmtId = "UserInfo.FindByCreateTime";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByCreateUserID"/></summary>
		public IList<UserInfo> FindByCreateUserID(Int64 createUserID) {
			String stmtId = "UserInfo.FindByCreateUserID";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByEmail"/></summary>
		public IList<UserInfo> FindByEmail(String email) {
			String stmtId = "UserInfo.FindByEmail";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, email);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.FindByStatus"/></summary>
		public IList<UserInfo> FindByStatus(Int32 status) {
			String stmtId = "UserInfo.FindByStatus";
			IList<UserInfo> result = SqlMapperManager.Instance.QueryForList<UserInfo>(stmtId, status);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.Insert"/></summary>
		public void Insert(UserInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "UserInfo.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.Update"/></summary>
		public void Update(UserInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "UserInfo.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.Delete"/></summary>
		public void Delete(UserInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "UserInfo.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByUserName"/></summary>
		public int DeleteByUserName(String userName) {
			String stmtId = "UserInfo.DeleteByUserName";
			int result = SqlMapperManager.Instance.Delete(stmtId, userName);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByPassword"/></summary>
		public int DeleteByPassword(String password) {
			String stmtId = "UserInfo.DeleteByPassword";
			int result = SqlMapperManager.Instance.Delete(stmtId, password);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByRealName"/></summary>
		public int DeleteByRealName(String realName) {
			String stmtId = "UserInfo.DeleteByRealName";
			int result = SqlMapperManager.Instance.Delete(stmtId, realName);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByRoleID"/></summary>
		public int DeleteByRoleID(Int64 roleID) {
			String stmtId = "UserInfo.DeleteByRoleID";
			int result = SqlMapperManager.Instance.Delete(stmtId, roleID);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByDepartment"/></summary>
		public int DeleteByDepartment(String department) {
			String stmtId = "UserInfo.DeleteByDepartment";
			int result = SqlMapperManager.Instance.Delete(stmtId, department);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "UserInfo.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByCreateUserID"/></summary>
		public int DeleteByCreateUserID(Int64 createUserID) {
			String stmtId = "UserInfo.DeleteByCreateUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByEmail"/></summary>
		public int DeleteByEmail(String email) {
			String stmtId = "UserInfo.DeleteByEmail";
			int result = SqlMapperManager.Instance.Delete(stmtId, email);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.DeleteByStatus"/></summary>
		public int DeleteByStatus(Int32 status) {
			String stmtId = "UserInfo.DeleteByStatus";
			int result = SqlMapperManager.Instance.Delete(stmtId, status);
			return result;
		}
		
		/// <summary>Implements <see cref="IUserInfoDao.Reload"/></summary>
		public void Reload(UserInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "UserInfo.Find";
			SqlMapperManager.Instance.QueryForObject<UserInfo>(stmtId, obj, obj);
		}
		
	}

}
