//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>SpecialChannelDao</c> is the implementation of <see cref="ISpecialChannelDao"/>.</summary>
    public partial class SpecialChannelDao : BaseDAO, ISpecialChannelDao {

		/// <summary>Implements <see cref="ISpecialChannelDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "SpecialChannel.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="ISpecialChannelDao.Find"/></summary>
		public SpecialChannel Find(Int64 iD) {
			String stmtId = "SpecialChannel.Find";
			SpecialChannel result = SqlMapperManager.Instance.QueryForObject<SpecialChannel>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="ISpecialChannelDao.FindAll"/></summary>
		public IList<SpecialChannel> FindAll() {
			String stmtId = "SpecialChannel.FindAll";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.QuickFindAll"/></summary>
		public IList<SpecialChannel> QuickFindAll() {
			String stmtId = "SpecialChannel.QuickFindAll";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindBySpecialID"/></summary>
		public IList<SpecialChannel> FindBySpecialID(Int64 specialID) {
			String stmtId = "SpecialChannel.FindBySpecialID";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, specialID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindBySubSpecialName"/></summary>
		public IList<SpecialChannel> FindBySubSpecialName(String subSpecialName) {
			String stmtId = "SpecialChannel.FindBySubSpecialName";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, subSpecialName);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindByUrl"/></summary>
		public IList<SpecialChannel> FindByUrl(String url) {
			String stmtId = "SpecialChannel.FindByUrl";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, url);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindByTemplateID"/></summary>
		public IList<SpecialChannel> FindByTemplateID(Int64 templateID) {
			String stmtId = "SpecialChannel.FindByTemplateID";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindByCreateUserID"/></summary>
		public IList<SpecialChannel> FindByCreateUserID(Int64 createUserID) {
			String stmtId = "SpecialChannel.FindByCreateUserID";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindByCreateTiem"/></summary>
		public IList<SpecialChannel> FindByCreateTiem(DateTime createTiem) {
			String stmtId = "SpecialChannel.FindByCreateTiem";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, createTiem);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindByModifyUserID"/></summary>
		public IList<SpecialChannel> FindByModifyUserID(Int64 modifyUserID) {
			String stmtId = "SpecialChannel.FindByModifyUserID";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, modifyUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.FindByModifyTime"/></summary>
		public IList<SpecialChannel> FindByModifyTime(DateTime modifyTime) {
			String stmtId = "SpecialChannel.FindByModifyTime";
			IList<SpecialChannel> result = SqlMapperManager.Instance.QueryForList<SpecialChannel>(stmtId, modifyTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.Insert"/></summary>
		public void Insert(SpecialChannel obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SpecialChannel.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.Update"/></summary>
		public void Update(SpecialChannel obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SpecialChannel.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.Delete"/></summary>
		public void Delete(SpecialChannel obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SpecialChannel.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteBySpecialID"/></summary>
		public int DeleteBySpecialID(Int64 specialID) {
			String stmtId = "SpecialChannel.DeleteBySpecialID";
			int result = SqlMapperManager.Instance.Delete(stmtId, specialID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteBySubSpecialName"/></summary>
		public int DeleteBySubSpecialName(String subSpecialName) {
			String stmtId = "SpecialChannel.DeleteBySubSpecialName";
			int result = SqlMapperManager.Instance.Delete(stmtId, subSpecialName);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteByUrl"/></summary>
		public int DeleteByUrl(String url) {
			String stmtId = "SpecialChannel.DeleteByUrl";
			int result = SqlMapperManager.Instance.Delete(stmtId, url);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteByTemplateID"/></summary>
		public int DeleteByTemplateID(Int64 templateID) {
			String stmtId = "SpecialChannel.DeleteByTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteByCreateUserID"/></summary>
		public int DeleteByCreateUserID(Int64 createUserID) {
			String stmtId = "SpecialChannel.DeleteByCreateUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteByCreateTiem"/></summary>
		public int DeleteByCreateTiem(DateTime createTiem) {
			String stmtId = "SpecialChannel.DeleteByCreateTiem";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTiem);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteByModifyUserID"/></summary>
		public int DeleteByModifyUserID(Int64 modifyUserID) {
			String stmtId = "SpecialChannel.DeleteByModifyUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, modifyUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.DeleteByModifyTime"/></summary>
		public int DeleteByModifyTime(DateTime modifyTime) {
			String stmtId = "SpecialChannel.DeleteByModifyTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, modifyTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ISpecialChannelDao.Reload"/></summary>
		public void Reload(SpecialChannel obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SpecialChannel.Find";
			SqlMapperManager.Instance.QueryForObject<SpecialChannel>(stmtId, obj, obj);
		}
		
	}

}
