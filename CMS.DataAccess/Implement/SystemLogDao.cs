//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>SystemLogDao</c> is the implementation of <see cref="ISystemLogDao"/>.</summary>
    public partial class SystemLogDao : BaseDAO, ISystemLogDao {

		/// <summary>Implements <see cref="ISystemLogDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "SystemLog.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="ISystemLogDao.Find"/></summary>
		public SystemLog Find(Int64 iD) {
			String stmtId = "SystemLog.Find";
			SystemLog result = SqlMapperManager.Instance.QueryForObject<SystemLog>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="ISystemLogDao.FindAll"/></summary>
		public IList<SystemLog> FindAll() {
			String stmtId = "SystemLog.FindAll";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.QuickFindAll"/></summary>
		public IList<SystemLog> QuickFindAll() {
			String stmtId = "SystemLog.QuickFindAll";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByLogType"/></summary>
		public IList<SystemLog> FindByLogType(Int32 logType) {
			String stmtId = "SystemLog.FindByLogType";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, logType);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByLogLevel"/></summary>
		public IList<SystemLog> FindByLogLevel(Int32 logLevel) {
			String stmtId = "SystemLog.FindByLogLevel";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, logLevel);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByOperatorUserID"/></summary>
		public IList<SystemLog> FindByOperatorUserID(Int64? operatorUserID) {
			String stmtId = "SystemLog.FindByOperatorUserID";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, operatorUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByURL"/></summary>
		public IList<SystemLog> FindByURL(String uRL) {
			String stmtId = "SystemLog.FindByURL";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, uRL);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByOperatorDesc"/></summary>
		public IList<SystemLog> FindByOperatorDesc(String operatorDesc) {
			String stmtId = "SystemLog.FindByOperatorDesc";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, operatorDesc);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByErrorMessage"/></summary>
		public IList<SystemLog> FindByErrorMessage(String errorMessage) {
			String stmtId = "SystemLog.FindByErrorMessage";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, errorMessage);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.FindByCreateTime"/></summary>
		public IList<SystemLog> FindByCreateTime(DateTime createTime) {
			String stmtId = "SystemLog.FindByCreateTime";
			IList<SystemLog> result = SqlMapperManager.Instance.QueryForList<SystemLog>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.Insert"/></summary>
		public void Insert(SystemLog obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SystemLog.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.Update"/></summary>
		public void Update(SystemLog obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SystemLog.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.Delete"/></summary>
		public void Delete(SystemLog obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SystemLog.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByLogType"/></summary>
		public int DeleteByLogType(Int32 logType) {
			String stmtId = "SystemLog.DeleteByLogType";
			int result = SqlMapperManager.Instance.Delete(stmtId, logType);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByLogLevel"/></summary>
		public int DeleteByLogLevel(Int32 logLevel) {
			String stmtId = "SystemLog.DeleteByLogLevel";
			int result = SqlMapperManager.Instance.Delete(stmtId, logLevel);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByOperatorUserID"/></summary>
		public int DeleteByOperatorUserID(Int64? operatorUserID) {
			String stmtId = "SystemLog.DeleteByOperatorUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, operatorUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByURL"/></summary>
		public int DeleteByURL(String uRL) {
			String stmtId = "SystemLog.DeleteByURL";
			int result = SqlMapperManager.Instance.Delete(stmtId, uRL);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByOperatorDesc"/></summary>
		public int DeleteByOperatorDesc(String operatorDesc) {
			String stmtId = "SystemLog.DeleteByOperatorDesc";
			int result = SqlMapperManager.Instance.Delete(stmtId, operatorDesc);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByErrorMessage"/></summary>
		public int DeleteByErrorMessage(String errorMessage) {
			String stmtId = "SystemLog.DeleteByErrorMessage";
			int result = SqlMapperManager.Instance.Delete(stmtId, errorMessage);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "SystemLog.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ISystemLogDao.Reload"/></summary>
		public void Reload(SystemLog obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "SystemLog.Find";
			SqlMapperManager.Instance.QueryForObject<SystemLog>(stmtId, obj, obj);
		}
		
	}

}
