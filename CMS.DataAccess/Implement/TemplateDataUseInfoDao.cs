//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>TemplateDataUseInfoDao</c> is the implementation of <see cref="ITemplateDataUseInfoDao"/>.</summary>
    public partial class TemplateDataUseInfoDao : ITemplateDataUseInfoDao {

		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "TemplateDataUseInfo.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.Find"/></summary>
		public TemplateDataUseInfo Find(Int64 iD) {
			String stmtId = "TemplateDataUseInfo.Find";
			TemplateDataUseInfo result = SqlMapperManager.Instance.QueryForObject<TemplateDataUseInfo>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.FindAll"/></summary>
		public IList<TemplateDataUseInfo> FindAll() {
			String stmtId = "TemplateDataUseInfo.FindAll";
			IList<TemplateDataUseInfo> result = SqlMapperManager.Instance.QueryForList<TemplateDataUseInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.QuickFindAll"/></summary>
		public IList<TemplateDataUseInfo> QuickFindAll() {
			String stmtId = "TemplateDataUseInfo.QuickFindAll";
			IList<TemplateDataUseInfo> result = SqlMapperManager.Instance.QueryForList<TemplateDataUseInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.FindByMainTemplateID"/></summary>
		public IList<TemplateDataUseInfo> FindByMainTemplateID(Int64? mainTemplateID) {
			String stmtId = "TemplateDataUseInfo.FindByMainTemplateID";
			IList<TemplateDataUseInfo> result = SqlMapperManager.Instance.QueryForList<TemplateDataUseInfo>(stmtId, mainTemplateID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.FindByTemplateID"/></summary>
		public IList<TemplateDataUseInfo> FindByTemplateID(Int64? templateID) {
			String stmtId = "TemplateDataUseInfo.FindByTemplateID";
			IList<TemplateDataUseInfo> result = SqlMapperManager.Instance.QueryForList<TemplateDataUseInfo>(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.FindByDataBlockID"/></summary>
		public IList<TemplateDataUseInfo> FindByDataBlockID(Int64? dataBlockID) {
			String stmtId = "TemplateDataUseInfo.FindByDataBlockID";
			IList<TemplateDataUseInfo> result = SqlMapperManager.Instance.QueryForList<TemplateDataUseInfo>(stmtId, dataBlockID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.Insert"/></summary>
		public void Insert(TemplateDataUseInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TemplateDataUseInfo.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.Update"/></summary>
		public void Update(TemplateDataUseInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TemplateDataUseInfo.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.Delete"/></summary>
		public void Delete(TemplateDataUseInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TemplateDataUseInfo.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.DeleteByMainTemplateID"/></summary>
		public int DeleteByMainTemplateID(Int64? mainTemplateID) {
			String stmtId = "TemplateDataUseInfo.DeleteByMainTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, mainTemplateID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.DeleteByTemplateID"/></summary>
		public int DeleteByTemplateID(Int64? templateID) {
			String stmtId = "TemplateDataUseInfo.DeleteByTemplateID";
			int result = SqlMapperManager.Instance.Delete(stmtId, templateID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.DeleteByDataBlockID"/></summary>
		public int DeleteByDataBlockID(Int64? dataBlockID) {
			String stmtId = "TemplateDataUseInfo.DeleteByDataBlockID";
			int result = SqlMapperManager.Instance.Delete(stmtId, dataBlockID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITemplateDataUseInfoDao.Reload"/></summary>
		public void Reload(TemplateDataUseInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TemplateDataUseInfo.Find";
			SqlMapperManager.Instance.QueryForObject<TemplateDataUseInfo>(stmtId, obj, obj);
		}
		
	}

}
