//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using CMS.Domain;
using CMS.DataAccess.Interface;

namespace CMS.DataAccess.Implement {
	
    /// <summary><c>TagDefineDao</c> is the implementation of <see cref="ITagDefineDao"/>.</summary>
    public partial class TagDefineDao : BaseDAO, ITagDefineDao {

		/// <summary>Implements <see cref="ITagDefineDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "TagDefine.GetCount";
			int result = SqlMapperManager.Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="ITagDefineDao.Find"/></summary>
		public TagDefine Find(Int64 id) {
			String stmtId = "TagDefine.Find";
			TagDefine result = SqlMapperManager.Instance.QueryForObject<TagDefine>(stmtId, id);
			return result;
		}

		/// <summary>Implements <see cref="ITagDefineDao.FindAll"/></summary>
		public IList<TagDefine> FindAll() {
			String stmtId = "TagDefine.FindAll";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.QuickFindAll"/></summary>
		public IList<TagDefine> QuickFindAll() {
			String stmtId = "TagDefine.QuickFindAll";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.FindByTagName"/></summary>
		public IList<TagDefine> FindByTagName(String tagName) {
			String stmtId = "TagDefine.FindByTagName";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, tagName);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.FindByTagCode"/></summary>
		public IList<TagDefine> FindByTagCode(String tagCode) {
			String stmtId = "TagDefine.FindByTagCode";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, tagCode);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.FindByCreateTime"/></summary>
		public IList<TagDefine> FindByCreateTime(DateTime createTime) {
			String stmtId = "TagDefine.FindByCreateTime";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.FindByCreateUserID"/></summary>
		public IList<TagDefine> FindByCreateUserID(Int64 createUserID) {
			String stmtId = "TagDefine.FindByCreateUserID";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.FindByModifyTime"/></summary>
		public IList<TagDefine> FindByModifyTime(DateTime modifyTime) {
			String stmtId = "TagDefine.FindByModifyTime";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, modifyTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.FindByModifyUserID"/></summary>
		public IList<TagDefine> FindByModifyUserID(Int64 modifyUserID) {
			String stmtId = "TagDefine.FindByModifyUserID";
			IList<TagDefine> result = SqlMapperManager.Instance.QueryForList<TagDefine>(stmtId, modifyUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.Insert"/></summary>
		public void Insert(TagDefine obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TagDefine.Insert";
			SqlMapperManager.Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.Update"/></summary>
		public void Update(TagDefine obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TagDefine.Update";
			SqlMapperManager.Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.Delete"/></summary>
		public void Delete(TagDefine obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TagDefine.Delete";
			SqlMapperManager.Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.DeleteByTagName"/></summary>
		public int DeleteByTagName(String tagName) {
			String stmtId = "TagDefine.DeleteByTagName";
			int result = SqlMapperManager.Instance.Delete(stmtId, tagName);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.DeleteByTagCode"/></summary>
		public int DeleteByTagCode(String tagCode) {
			String stmtId = "TagDefine.DeleteByTagCode";
			int result = SqlMapperManager.Instance.Delete(stmtId, tagCode);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime createTime) {
			String stmtId = "TagDefine.DeleteByCreateTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.DeleteByCreateUserID"/></summary>
		public int DeleteByCreateUserID(Int64 createUserID) {
			String stmtId = "TagDefine.DeleteByCreateUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, createUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.DeleteByModifyTime"/></summary>
		public int DeleteByModifyTime(DateTime modifyTime) {
			String stmtId = "TagDefine.DeleteByModifyTime";
			int result = SqlMapperManager.Instance.Delete(stmtId, modifyTime);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.DeleteByModifyUserID"/></summary>
		public int DeleteByModifyUserID(Int64 modifyUserID) {
			String stmtId = "TagDefine.DeleteByModifyUserID";
			int result = SqlMapperManager.Instance.Delete(stmtId, modifyUserID);
			return result;
		}
		
		/// <summary>Implements <see cref="ITagDefineDao.Reload"/></summary>
		public void Reload(TagDefine obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "TagDefine.Find";
			SqlMapperManager.Instance.QueryForObject<TagDefine>(stmtId, obj, obj);
		}
		
	}

}
