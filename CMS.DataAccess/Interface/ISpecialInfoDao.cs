//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoIntf.cst at 2011/9/14 21:40:03
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;

using CMS.Domain;

namespace CMS.DataAccess.Interface {
	
    /// <summary><c>ISpecialInfoDao</c> is the DAO interface for <see cref="CMS.Domain.SpecialInfo"/>.</summary>
    public partial interface ISpecialInfoDao {        

		/// <summary>Returns the total count of objects.</summary>
		int GetCount();

		/// <summary>Finds a <see cref="SpecialInfo"/> instance by the primary key value.</summary>
		SpecialInfo Find(Int64 iD);

		/// <summary>Finds all SpecialInfo instances.</summary>
		IList<SpecialInfo> FindAll();
		
		/// <summary>Finds all SpecialInfo instances without Lob columns loaded.</summary>
		IList<SpecialInfo> QuickFindAll();
		
		/// <summary>Finds SpecialInfo instances by Name value.</summary>
		IList<SpecialInfo> FindByName(String name);
		
		/// <summary>Finds SpecialInfo instances by EnName value.</summary>
		IList<SpecialInfo> FindByEnName(String enName);
		
		/// <summary>Finds SpecialInfo instances by TemplateID value.</summary>
		IList<SpecialInfo> FindByTemplateID(Int64 templateID);
		
		/// <summary>Finds SpecialInfo instances by SmallPicUrl value.</summary>
		IList<SpecialInfo> FindBySmallPicUrl(String smalllPicUrl);
		
		/// <summary>Finds SpecialInfo instances by PicUrl value.</summary>
		IList<SpecialInfo> FindByPicUrl(String picUrl);
		
		/// <summary>Finds SpecialInfo instances by Keyword value.</summary>
		IList<SpecialInfo> FindByKeyword(String keyword);
		
		/// <summary>Finds SpecialInfo instances by Description value.</summary>
		IList<SpecialInfo> FindByDescription(String description);
		
		/// <summary>Finds SpecialInfo instances by Sort value.</summary>
		IList<SpecialInfo> FindBySort(Int32 sort);
		
		/// <summary>Finds SpecialInfo instances by SpecialUrlPart value.</summary>
		IList<SpecialInfo> FindBySpecialUrlPart(String specialUrlPart);
		
		/// <summary>Finds SpecialInfo instances by CreateTime value.</summary>
		IList<SpecialInfo> FindByCreateTime(DateTime createTime);
		
		/// <summary>Inserts a new SpecialInfo instance into underlying database table.</summary>
		void Insert(SpecialInfo obj);
		
		/// <summary>Update the underlying database record of a SpecialInfo instance.</summary>
		void Update(SpecialInfo obj);
		
		/// <summary>Delete the underlying database record of a SpecialInfo instance.</summary>
		void Delete(SpecialInfo obj);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.Name"/>.</summary>
		int DeleteByName(String name);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.EnName"/>.</summary>
		int DeleteByEnName(String enName);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.TemplateID"/>.</summary>
		int DeleteByTemplateID(Int64 templateID);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.SmallPicUrl"/>.</summary>
		int DeleteBySmallPicUrl(String smalllPicUrl);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.PicUrl"/>.</summary>
		int DeleteByPicUrl(String picUrl);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.Keyword"/>.</summary>
		int DeleteByKeyword(String keyword);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.Description"/>.</summary>
		int DeleteByDescription(String description);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.Sort"/>.</summary>
		int DeleteBySort(Int32 sort);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.SpecialUrlPart"/>.</summary>
		int DeleteBySpecialUrlPart(String specialUrlPart);
		
        /// <summary>Deletes <see cref="SpecialInfo"/> instances by <see cref="SpecialInfo.CreateTime"/>.</summary>
		int DeleteByCreateTime(DateTime createTime);
		
		/// <summary>Reload the underlying database record of a SpecialInfo instance.</summary>
		void Reload(SpecialInfo obj);
		
	}

}
